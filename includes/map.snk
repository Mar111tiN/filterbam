def get_RG_info(w):
    '''
    gets the read-group information for SamToFastq from the config
    '''
    sample = f"{w.sample}_{w.type}"
    platform = config['setup']['platform']
    library = f"{config['setup']['library']}_{config['setup']['library_version']}"
    PU = f"{config['setup']['platform_unit']}.{get_lane(w)}"  # here should come the lane
    RG_info = f"--read-group-id={sample} --sample={sample} --platform-unit {PU} --platform={platform} --library={library}"
    return RG_info


rule ubamXT:
    input:
        get_FastqToSam_input  # gets two or three fastqs depending on Umi-setup
    output:
        bam = "ubam/{sample}_{type}.{split}.bam",
        metrix = "ubam/{sample}_{type}.{split}.metrix.txt"
    threads:
        config['ubamXT']['threads']
    log:
        "logs/ubam/{sample}_{type}.{split}.log"
    conda:
        f"../{config['envs']}/ubam-env.yml"
    params:
        read_group_info = get_RG_info,
        read_structure = "+T +T +M" if config['setup']['UMI'] else "+T +T",
        deflater = "use_jdk_deflater=true use_jdk_inflater=true" if config['ubamXT']['use_jdk'] else ""
    shell:
        "fgbio FastqToBam -i {input} {params.read_group_info} -s --read-structure {params.read_structure} -o /dev/stdout| "
        "picard MarkIlluminaAdapters {params.deflater} I=/dev/stdin O={output.bam} M={output.metrix} TMP_DIR=$TMPDIR"


def get_sed(w):
    '''
    adjusts the sed command for the fasta.genome generation depending on the current genome build
    '''

    if config['ref']['build'] == 'hg19':
        sed_cmd = "/^>/s/^>([^. ]*)\\.?1? [^ ]+ .*:(.*):1$/\\1\\t\\2/p"
    elif config['ref']['build'] == 'hg38':
        sed_cmd = "/^>.*LN.*$/s/^>([^. ]*).*LN:([0-9]+) .*$/\\1\\t\\2/p"
    return sed_cmd


rule make_ref_genome:
    # creates ref-genome if not available and outputs a gen_ref.done flag in the respective folder
    output:
        touch(os.path.join(full_path('genome_path'), 'gen_ref.done'))
    threads:
        config['alignment']['threads']
    params:
        _dict = full_path('genome').replace('.fasta', '.dict').replace('.fa', '.dict'),
        sed_cmd = get_sed,
        refgen = full_path('genome')
    conda:
        f"../{config['envs']}/align-env.yml"
    message:
        "Genome indexed by bwa"
    shell:
        "sed -nr '{params.sed_cmd}' < {params.refgen} > {params.refgen}.genome;"
        "picard CreateSequenceDictionary REFERENCE={params.refgen} OUTPUT={params._dict}; "
        "bwa index {params.refgen}; "
        "samtools faidx {params.refgen}"


def get_clip(_):
    '''
    if UMI-tools is active, do not clip overlap in order to facilitate UMI-grouping
    overlap clipping can then proceed after UMI-filtering
    '''

    if config['UMI_filter']['run']:
        return "FALSE"
    elif config['alignment']['clip_overlap']:
        return "TRUE"
    return "FALSE"


rule map_ubam:
    input:
        bam = "ubam/{sample}_{type}.{split}.bam",
        genome = os.path.join(full_path('genome_path'), 'gen_ref.done')
    output:
        "mapped/{sample}_{type}.{split}.bam"
    log:
        "logs/mapped/{sample}_{type}.{split}.log"
    threads:
        config['alignment']['threads'] + 4
    conda:
        f"../{config['envs']}/align-env.yml"
    params:
        bwa_threads = config['alignment']['threads'],
        refgen = full_path('genome'),
        clip_overlap = get_clip,
        alignment_strategy = config['alignment']['strategy'],
        deflater = "use_jdk_deflater=true use_jdk_inflater=true" if config['alignment']['use_jdk'] else ""
    shell:
        "picard SamToFastq {params.deflater} "
        "I={input.bam} FASTQ=/dev/stdout "
        "ClIPPING_ATTRIBUTE=XT "        # use XT tag for clipping
        "CLIPPING_ACTION=2 "             # base-quality of clipped bases is set to 2
        "INTERLEAVE=TRUE "
        "NON_PF=TRUE "
        "TMP_DIR=$TMPDIR | "
        # pipe to bwa mem
        "bwa mem -M -t {params.bwa_threads} -p {params.refgen} /dev/stdin | "
        # pipe to MergeBamAlignment
        "picard MergeBamAlignment {params.deflater} R={params.refgen} "
        "UNMAPPED_BAM={input.bam} "
        "ALIGNED_BAM=/dev/stdin "
        "O={output} "
        "CREATE_INDEX=TRUE "
        "ADD_MATE_CIGAR=TRUE "
        "CLIP_ADAPTERS=FALSE "  # should this be true?
        "CLIP_OVERLAPPING_READS={params.clip_overlap} "
        "INCLUDE_SECONDARY_ALIGNMENTS=true "
        "MAX_GAPS=-1 "
        "PRIMARY_ALIGNMENT_STRATEGY={params.alignment_strategy} "
        "ATTRIBUTES_TO_RETAIN=XS "
        "ATTRIBUTES_TO_RETAIN=RX "
        "TMP_DIR=$TMPDIR "
