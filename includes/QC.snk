rule concat_fastq:
    '''
    fastq are concatenated for use in fastQC
    takes a long time
    '''
    input:
        expand("fastq_trimmed/{{sample}}_{{type}}_{{read}}.{split}.{{trim}}.fastq.gz", split=list(range(config['fastq']['split_factor'])))
    output:
        "fastq_trimmed/{sample}_{type}_{read}.{trim}.fastq.gz"

    threads: config['fastq']['threads']
    shell:
        "zcat fastq_trimmed/{wildcards.sample}_{wildcards.type}_{wildcards.read}.*.{wildcards.trim}.fastq.gz | pigz -5 -p {threads} > {output}"


rule fastqc:
    input: get_fastq_input
    output:
        "fastqc/{sample}_{type}_{readtrim}_fastqc.zip"
    threads: 4
    log:
        "logs/fastqc/{sample}_{type}_{readtrim}.log"
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    script:
        "../scripts/fastQC.py"


rule fast_multiQC:
    input:
        get_fastqc_list
    output:
        "QC/fastQC.html"
    threads: 2
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    shell:
        "multiqc -f -o QC/ -n fastQC --interactive fastqc/; "  # interactive for big number of files
        "rm -f fastqc/*_fastqc.html fastq/*.sub"  # leave the zip files for accumulated multiQC of all processed samples


# ####################### BAM QC ########################################

rule cover_BED:
    input:
        sample = "bamfinal/{sample}_{type}.bam",
        ref_gen = os.path.join(full_path('genome_path'), 'gen_ref.done')
    output:
        "coverBED/{sample}_{type}.txt"
    log:
        "logs/coverBED/{sample}_{type}.log"
    threads: 2
    params:
        format_coverage = get_script('format_bed_coverage'),
        exon_cover = get_bed_file('Covered'),
        prettifyBed = get_script('prettifyBED'),
        fastq = get_fastq_pair,
        refgen = full_path('genome')
    conda:
        "../env/bedcover-env.yml"
    script:
        "../scripts/bedcover.py"


rule bam_metrix:
    input:
        bam = "bamfinal/{sample}_{type}.bam"
    output:
        "bam_metrics/{sample}_{type}.metrics"
    conda:
        f"../{config['envs']}/align-env.yml"
    log:
        "logs/bam_metrix/{sample}_{type}.log"
    threads: config['bam_metrix']['threads']
    params:
        refgen = full_path('genome'),
        bait = os.path.join(config['paths']['mystatic'], config['bam_metrix']['bait']),
        target = os.path.join(config['paths']['mystatic'], config['bam_metrix']['target'])
    shell:
        "picard CollectHsMetrics I={input.bam} O={output} R={params.refgen} "
        "BAIT_INTERVALS={params.bait} "
        "TARGET_INTERVALS={params.target} "
        "COVERAGE_CAP=1000"

rule bam_QC:
    input:
        expand("bam_metrics/{samples}.metrics", samples=sample_df.index)
    output:
        "QC/libraryQC.html"
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    threads: 2
    shell:
        "multiqc -f -o QC/ -n libraryQC --interactive bam_metrics/; "


# ##################### insert size QC ##############################################
rule insert_metrix:
    input:
        bam = "bamfinal/{sample}_{type}.bam"
    output:
        metric = "insert_metrics/{sample}_{type}.metrics",
        pdf = "insert_metrics/{sample}_{type}.metrics.pdf"
    conda:
        f"../{config['envs']}/picard-env.yml"
    log:
        "logs/bam_metrix/{sample}_{type}.log"
    threads: config['bam_metrix']['threads']
    shell:
        "picard CollectInsertSizeMetrics I={input.bam} O={output.metric} H={output.pdf} M=0.5"


rule insert_QC:
    input:
        expand("insert_metrics/{samples}.metrics", samples=sample_df.index)
    output:
        "QC/insertQC.html"
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    threads: 2
    shell:
        "multiqc -f -o QC/ -n insertQC --interactive insert_metrics/; "
