rule mpileup:
    input:
        "bamfinalsplit/{sample}_{type}.{chrom}.bam"
    output:
        "pileup/{sample}_{type}.{chrom}.pileup"
    log:
        "logs/pileup/{sample}_{type}.{chrom}.log"
    threads:
        2
    conda:
        f"../{config['envs']}/align-env.yml"
    params:
        bedfile = get_bed_file('Padded'),
        refgen = full_path('genome'),
        qual = f"-q {config['mpileup']['MAPQ']} -Q {config['mpileup']['Q']}"
    shell:
        # bed file does not have to be padded here, I think
        "samtools mpileup -f {params.refgen} {params.qual} -l {params.bedfile} {input} > {output} 2>{log}"


rule varscan:
    input:
        tumor = "pileup/{sample}_{tumor}.{chrom}.pileup",
        norm = "pileup/{sample}_{norm}.{chrom}.pileup"
    output:
        indel = "varscan/{sample}_{tumor}-{norm}.{chrom}.indel.vcf" if config['varscan']['vcf'] else "varscan/{sample}_{tumor}-{norm}.{chrom}.indel",
        snp = "varscan/{sample}_{tumor}-{norm}.{chrom}.snp.vcf" if config['varscan']['vcf'] else "varscan/{sample}_{tumor}-{norm}.{chrom}.snp"
    threads:
        config['varscan']['threads']
    params:
        vcf = "--output-vcf 1 " if config['varscan']['vcf'] else "", 
        min = f"--min-coverage {config['varscan']['min-coverage']} --min-var-freq {config['varscan']['min-var-freq']} --min-freq-for-hom {config['varscan']['min-freq-for-hom']}",
        p = f"--p-value {config['varscan']['p-value']} --somatic-p-value {config['varscan']['somatic-p-value']}",
        np = f"--normal-purity {config['varscan']['normal-purity']} --tumor-purity {config['varscan']['tumor-purity']}",
    conda:
        f"../{config['envs']}/varscan-env.yml"
    log:
        "logs/varscan/{sample}_{tumor}-{norm}.{chrom}.log"
    shell:
        "varscan somatic {input.norm} {input.tumor} {params.vcf}"
        "--output-snp {output.snp} --output-indel {output.indel} {params.min} {params.p} {params.np}"
        # " &>{log}"


def get_anno_input(_):
    if config['varscan']['vcf']:
        indel = "varscan/{sample}_{tumor}-{norm}.{chrom}.indel.vcf"
        snp = "varscan/{sample}_{tumor}-{norm}.{chrom}.snp.vcf"
    else:
        indel = "varscan/{sample}_{tumor}-{norm}.{chrom}.indel"
        snp = "varscan/{sample}_{tumor}-{norm}.{chrom}.snp"
    return {'indel': indel, 'snp': snp}


rule varscan2table:
    input:
        unpack(get_anno_input)
    output:
        "table/{sample}_{tumor}-{norm}.{chrom}.csv"
    threads: 6
    conda:
        f"../{config['envs']}/vcf-env.yml"
    params:
        vcf2csv = get_script('vcf2csv'),
        editcsv = get_script('editcsv'),
        coords2annovar = get_script('coords2annovar'),
        varscan2table = get_script('varscan2table')
    script:
        "../scripts/varscan2table.py"


rule merge_table:
    input:
        expand("table/{{sample}}_{{tumor}}-{{norm}}.{chrom}.csv", chrom=chrom_list)
    output:
        "table/{sample}_{tumor}-{norm}.csv"
    threads: 1
    run:
        table_dfs = []
        for table_file in input:
            table_df = pd.read_csv(table_file, sep='\t', header=None, names=['Chr', 'Start', 'End', 'Ref', 'Alt', 'somatic_status', 'TR1', 'TR1+', 'TR2', 'TR2+', 'NR1', 'NR1+', 'NR2', 'NR2+', 'somaticP', 'variantP'])
            table_dfs.append(table_df)
        table_df = pd.concat(table_dfs).sort_values(['Chr', 'Start'])
        table_df.to_csv(output[0], sep='\t', index=False)

